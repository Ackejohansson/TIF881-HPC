Assembler
O3 doesent do anything, hence faster
ASM can be very different

____________________________________________________________________________
Valgrind and GDB
1. OK. 2 heap alloc 2 free
2. NOK. Segmentation fault.
3. Runs with memoryleak! Memory in use after exit
4. Runs but aborts. Invalid free.

____________________________________________________________________________
GDB
Use when "Segmentation fault"
Points to 0x0 (null)

____________________________________________________________________________
Inlining 
```
gcc -O2 -march=native -o samef same_file.c
hyperfine -w 10 -N --runs 200000 ./FILENAME
```

Hard to see difference
Different file -> more overhead -> slower

Use Static inline to inline, gains speed at cost of memory
____________________________________________________________________________
Locality  - 10000 runs
O0
row_sums               2.5872984 ms
col_sums               3.1777095 ms
col_sums_improved took 2.8010547 ms

O2
row_sums took          1.0902622 ms
col_sums took          1.4616230 ms
col_sums_improved took 0.3291039 ms

Row major faster
Some sort of parralelisation happening in O2? Big diff for improved
____________________________________________________________________________
Data_dependency
Faster with loop unrolling..

____________________________________________________________________________
Direct vs indirect addressing
O0
Time for linear init and update: 3.227389 ms
Time for jump init and update: 8.937400 ms
Time for direct address: 2.437977 seconds

O2
Time for linear init and update: 1.078421 ms
Time for jump init and update: 8.008319 ms
Time for direct address: 0.603851 ms

SSD HDD
____________________________________________________________________________
O0
HDD Write Time: 0.006136 seconds
HDD Read Time: 0.000592 seconds

SSD Write Time: 0.002798 seconds
SSD Read Time: 0.000568 seconds

O2
HDD Write Time: 0.008721 seconds
HDD Read Time: 0.000636 seconds

SSD Write Time: 0.004794 seconds
SSD Read Time: 0.000614 seconds